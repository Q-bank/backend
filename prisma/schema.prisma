// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  fullName     String
  phoneNumber  String?
  role         Role     @default(CUSTOMER)
  kycVerified  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accounts     Account[]
  notifications Notification[]
  auditLogs     AuditLog[]
}

model Account {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  accountNumber String      @unique
  currency      Currency
  balance       Float       @default(0.0)
  type          AccountType
  status        AccountStatus @default(ACTIVE)
  createdAt     DateTime    @default(now())

  transactionsFrom Transaction[] @relation("FromAccount")
  transactionsTo   Transaction[] @relation("ToAccount")
}

model Transaction {
  id              String       @id @default(uuid())
  fromAccountId   String?
  toAccountId     String?
  fromAccount     Account?     @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount       Account?     @relation("ToAccount", fields: [toAccountId], references: [id])
  type            TransactionType
  amount          Float
  currency        Currency
  exchangeRate    Float?       // Used for international transfers
  status          TransactionStatus @default(PENDING)
  reason          String?
  reference       String        @unique
  createdAt       DateTime      @default(now())
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      String
  entity      String
  entityId    String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        NotificationType
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
  COMPLIANCE
  SUPPORT
}

enum Currency {
  NGN
  USD
  EUR
  GBP
  JPY
  // Extend as needed
}

enum AccountType {
  SAVINGS
  CURRENT
  DOMICILIARY
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  LOCAL_TRANSFER
  INTERNATIONAL_TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

enum NotificationType {
  TRANSACTION
  SECURITY
  SYSTEM
}